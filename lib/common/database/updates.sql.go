// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: updates.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUpdate = `-- name: CreateUpdate :one
Insert into
    updates ( employee_id, sprint_id, yesterday, today, blocked_by, breakaway, check_in_time, status, tasks)
values
    ( $1, $2, $3, $4, $5, $6, $7, $8, $9) Returning id, created_at, employee_id, sprint_id, yesterday, today, blocked_by, breakaway, check_in_time, status, tasks
`

type CreateUpdateParams struct {
	EmployeeID  pgtype.UUID        `db:"employee_id" json:"employee_id"`
	SprintID    pgtype.UUID        `db:"sprint_id" json:"sprint_id"`
	Yesterday   string             `db:"yesterday" json:"yesterday"`
	Today       string             `db:"today" json:"today"`
	BlockedBy   []string           `db:"blocked_by" json:"blocked_by"`
	Breakaway   string             `db:"breakaway" json:"breakaway"`
	CheckInTime pgtype.Timestamptz `db:"check_in_time" json:"check_in_time"`
	Status      string             `db:"status" json:"status"`
	Tasks       []string           `db:"tasks" json:"tasks"`
}

func (q *Queries) CreateUpdate(ctx context.Context, arg CreateUpdateParams) (Update, error) {
	row := q.db.QueryRow(ctx, createUpdate,
		arg.EmployeeID,
		arg.SprintID,
		arg.Yesterday,
		arg.Today,
		arg.BlockedBy,
		arg.Breakaway,
		arg.CheckInTime,
		arg.Status,
		arg.Tasks,
	)
	var i Update
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.EmployeeID,
		&i.SprintID,
		&i.Yesterday,
		&i.Today,
		&i.BlockedBy,
		&i.Breakaway,
		&i.CheckInTime,
		&i.Status,
		&i.Tasks,
	)
	return i, err
}
